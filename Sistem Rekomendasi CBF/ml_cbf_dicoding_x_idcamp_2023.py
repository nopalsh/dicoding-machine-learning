# -*- coding: utf-8 -*-
"""ML: CBF Dicoding x IDCamp 2023

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nejHTKnQWO-9FdB_vPfyya-OBLgEM1_m

## Mengimpor library yang dibutuhkan
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from tabulate import tabulate
import matplotlib.pyplot as plt
import joblib

"""## Load file CSV 'anime.csv'  dan menampilkan 5 baris pertama. Lalu, atur df ditetapkan agar semua kolom ditampilkan"""

df = pd.read_csv('anime.csv')
pd.set_option('display.max_columns', None)

df.head()

"""## Menampilkan informasi singkat tentang DataFrame 'df'"""

df.info()

"""## Mengambil beberapa kolom yang di perlukan dari'df' dan menyimpannya sebagai 'df_anime'"""

selected_columns = ['MAL_ID', 'Name', 'Score', 'Genres', 'Type', 'Aired', 'Rating', 'Members']
df_anime = df.loc[:, selected_columns]

"""## Membuat variabel 'genres_dummies' yang merupakan hasil encoding one-hot dari kolom 'Genres' pada DataFrame 'df_anime', lalu menggabungkannya dengan DataFrame 'df_anime'"""

genres_dummies = df_anime['Genres'].str.get_dummies(sep=', ')
df_anime_with_genres = pd.concat([df_anime, genres_dummies], axis=1)
df_anime_with_genres

"""## Membuat Visualisasi Distribusi Genre Anime"""

genre_counts = genres_dummies.sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
genre_counts.plot(kind='bar', color='skyblue')
plt.title('Distribusi Genre Anime')
plt.xlabel('Genre')
plt.ylabel('Banyaknya Anime')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## Membuat DataFrame baru 'df_filtered' yang berisi data dari 'df_anime_with_genres' dimana tidak ada konten rekomendasi anime dewasa dan menghitung jumlah nilai unik dalam kolom 'Rating'"""

df_filtered = df_anime_with_genres[df_anime_with_genres['Rating'] != 'Rx - Hentai']
unique_ratings_count = df_filtered['Rating'].value_counts()
unique_ratings_count

"""Membuat dictionary 'rating_mapping' yang memetakan nilai-nilai string ke nilai numerik untuk kolom 'Rating'"""

rating_mapping = {
    'Unknown': 0,
    'G - All Ages': 1,
    'PG - Children': 2,
    'PG-13 - Teens 13 or older': 3,
    'R - 17+ (violence & profanity)': 4,
    'R+ - Mild Nudity': 5
}

df_filtered['Rating'] = df_filtered['Rating'].replace(rating_mapping)

"""## Mengambil nilai unik dari kolom 'Type' dalam DataFrame 'df_filtered'"""

unique_types = df_filtered['Type'].unique()
print(unique_types)

"""## Mengganti nilai string dalam kolom 'Type' dari DataFrame 'df_filtered' dengan nilai numerik sesuai dengan mapping yang telah ditentukan, lalu menampilkan lima baris pertama dari DataFrame baru"""

type_mapping = {
    'Unknown': 0,
    'TV': 1,
    'Movie': 2,
    'OVA': 3,
    'Special': 4,
    'ONA': 5,
    'Music': 6
}

df_filtered['Type'] = df_filtered['Type'].replace(type_mapping)
df_filtered.head()

df_filtered.info()

"""## Mengonversi kolom 'Score' ke tipe data numerik dengan mengabaikan nilai yang tidak dapat diubah, dan menghapus baris yang mengandung nilai yang hilang dari DataFrame 'df_filtered'"""

df_filtered['Score'] = pd.to_numeric(df_filtered['Score'], errors='coerce')
df_filtered.dropna(inplace=True)

"""## Membuat objek MinMaxScaler() untuk normalisasi, lalu menentukan fitur-fitur yang akan dinormalisasi dalam list 'features_to_normalize'"""

scaler = MinMaxScaler()
features_to_normalize = ['Score', 'Type', 'Rating', 'Action', 'Adventure', 'Cars', 'Comedy', 'Dementia', 'Demons',
                         'Drama', 'Ecchi', 'Fantasy', 'Game', 'Harem', 'Historical', 'Horror', 'Josei',
                         'Kids', 'Magic', 'Martial Arts', 'Mecha', 'Military', 'Music', 'Mystery', 'Parody',
                         'Police', 'Psychological', 'Romance', 'Samurai', 'School', 'Sci-Fi', 'Seinen', 'Shoujo',
                         'Shoujo Ai', 'Shounen', 'Shounen Ai', 'Slice of Life', 'Space', 'Sports', 'Super Power',
                         'Supernatural', 'Thriller', 'Unknown', 'Vampire', 'Yaoi', 'Yuri']

"""## Menggunakan objek MinMaxScaler() untuk menormalkan fitur-fitur yang ditentukan dalam list 'features_to_normalize' pada DataFrame 'df_filtered', dan menyimpan hasilnya ke dalam DataFrame baru 'df_normalized'"""

df_normalized = df_filtered.copy()
df_normalized[features_to_normalize] = scaler.fit_transform(df_filtered[features_to_normalize])

"""## Menghitung "cosine similarity" antar fitur anime yang telah dinormalisasi dan menyimpan hasilnya dalam 'anime_similarity'"""

anime_features = df_normalized[features_to_normalize]
anime_similarity = cosine_similarity(anime_features, anime_features)

"""## Mendefinisikan fungsi 'get_recommendations' untuk mendapatkan rekomendasi lima anime berdasarkan nama anime yang diberikan, menggunakan matriks kemiripan dan data anime"""

def get_recommendations(anime_name, similarity_matrix, anime_data):
    anime_index = anime_data[anime_data['Name'] == anime_name].index[0]
    anime_similarities = similarity_matrix[anime_index]
    similar_anime_indices = anime_similarities.argsort()[::-1][1:6]
    similar_anime_names = anime_data.iloc[similar_anime_indices]['Name'].tolist()
    return similar_anime_names

"""## Variabel 'anime_rec' menyimpan nama anime yang akan digunakan sebagai referensi untuk mendapatkan rekomendasi anime lainnya"""

anime_rec = "Naruto"

"""## Mencetak 5 rekomendasi anime berdasarkan anime yang ditulis pada var "anime_rec" menggunakan matriks kemiripan dan data anime yang telah difilter"""

recommended_anime = get_recommendations(anime_rec, anime_similarity, df_filtered)
# Buat DataFrame dari rekomendasi anime
df_recommended_anime = pd.DataFrame(recommended_anime, columns=['Rekomendasi Anime'])

# Cetak DataFrame dalam format tabel
print("Rekomendasi Anime:")
df_recommended_anime

"""## Menghitung presisi dari rekomendasi anime berdasarkan anime yang disukai pengguna, menggunakan fungsi 'calculate_precision'"""

def calculate_precision(recommended_anime, liked_anime):
    relevant_recommendations = len(set(recommended_anime) & set(liked_anime))
    precision = relevant_recommendations / len(recommended_anime) if len(recommended_anime) > 0 else 0
    return precision

#Anime yang disukai oleh pengguna (contoh)
liked_anime = ['Naruto', 'Bleach', 'One Piece', 'Dragon Ball Z']

precision = calculate_precision(recommended_anime, liked_anime)
print("Precision:", precision)

"""## Menghitung skor recall dari rekomendasi anime berdasarkan anime yang disukai pengguna, menggunakan fungsi 'calculate_recall'"""

def calculate_recall(recommended_anime, liked_anime):
    relevant_recommendations = len(set(recommended_anime) & set(liked_anime))
    recall = relevant_recommendations / len(liked_anime) if len(liked_anime) > 0 else 0
    return recall

liked_anime = ['Naruto', 'Bleach', 'One Piece', 'Dragon Ball Z']

recall_score = calculate_recall(recommended_anime, liked_anime)
print("Recall Score:", recall_score)

"""## Menghitung skor F1 dari rekomendasi anime berdasarkan anime yang disukai pengguna, menggunakan fungsi 'calculate_f1'"""

def calculate_f1(recommended_anime, liked_anime):
    relevant_recommendations = len(set(recommended_anime) & set(liked_anime))
    precision = relevant_recommendations / len(recommended_anime) if len(recommended_anime) > 0 else 0
    recall = relevant_recommendations / len(liked_anime) if len(liked_anime) > 0 else 0
    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
    return f1_score

liked_anime = ['Naruto', 'Bleach', 'One Piece', 'Dragon Ball Z']

f1_score = calculate_f1(recommended_anime, liked_anime)
print("F1 Score:", f1_score)

#Membuat DataFrame yang berisi skor F1, recall, dan presisi beserta nilainya
scores_data = {
    "Metric": ["F1 Score", "Recall Score", "Precision"],
    "Score": [f1_score, recall_score, precision]
}
df_scores = pd.DataFrame(scores_data)
df_scores

"""## Menyimpan model rekomendasi anime sebagai file"""

joblib.dump(anime_similarity, 'anime_recommendation_model_IDCAMP_2023.joblib')