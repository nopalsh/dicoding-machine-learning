# -*- coding: utf-8 -*-
"""Image Classification Model Deployment IDCAMP 2023

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LqxFCOf2artTSYhf9oPgDSq9TXAdhGzj
"""

!pip install kaggle

from google.colab import files

uploaded = files.upload()

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d ashishjangra27/face-mask-12k-images-dataset

import io
import os
import zipfile
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

file_dataset = 'face-mask-12k-images-dataset.zip'

with zipfile.ZipFile(file_dataset, 'r') as file_zip :
    file_zip.extractall()

dataset_dir = '/content/Face Mask Dataset'

masker_dir = os.path.join(dataset_dir, '/content/Face Mask Dataset/Train/WithMask')
tanpa_masker_dir = os.path.join(dataset_dir, '/content/Face Mask Dataset/Train/WithoutMask')

masker = [os.path.join(masker_dir, img) for img in os.listdir(masker_dir) if img.endswith('.png')]
tanpa_masker = [os.path.join(tanpa_masker_dir, img) for img in os.listdir(tanpa_masker_dir) if img.endswith('.png')]

label_masker  = [1] * len(masker)
label_tanpa_masker = [0] * len(tanpa_masker)

gambar = masker + tanpa_masker
label  = label_masker + label_tanpa_masker

df = pd.DataFrame({
    'Image': gambar,
    'Label': label
})

df

df.info()

sampel_gambar = df.sample(5)
fig, axes = plt.subplots(1, 5, figsize=(20, 4))

for ax, (index, row) in zip(axes, sampel_gambar.iterrows()):
    gambar_dir = row['Image']
    label = row['Label']

    gambaran = Image.open(gambar_dir)

    ax.imshow(gambaran)
    ax.set_title(f"Label : {label}, Resolusi : {gambaran.size}")
    ax.axis('off')

plt.show()

df['Label'] = df['Label'].astype(str)

train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

print("Ukuran training set :", train_df.shape)
print("Ukuran test set :", test_df.shape)

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = datagen.flow_from_dataframe(
    train_df,
    x_col='Image',
    y_col='Label',
    target_size=(64, 64),
    batch_size=32,
    class_mode='binary',
    subset=None
)
test_generator = datagen.flow_from_dataframe(
    test_df,
    x_col='Image',
    y_col='Label',
    target_size=(64, 64),
    batch_size=32,
    class_mode='binary',
    subset=None
)

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

checkpoint_callback = ModelCheckpoint("model-image-classification-IDCAMP-2023.keras", save_best_only=True)
early_stopping_callback = EarlyStopping(monitor='val_loss', patience=3)

history = model.fit(train_generator, epochs=5, validation_data=test_generator, callbacks=[checkpoint_callback, early_stopping_callback])

plt.plot(history.history['accuracy'], label='train_accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open('model-image-classification-IDCAMP-2023.tflite', 'wb') as f:
    f.write(tflite_model)