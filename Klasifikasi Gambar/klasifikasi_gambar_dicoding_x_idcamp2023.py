# -*- coding: utf-8 -*-
"""Klasifikasi_Gambar_Dicoding_x_IDCAMP2023.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_q-iqoIv5yzEwJyPyt8Kg2kTgSZj7Ith

**Nama Profile : MOCHAMAD NAUFAL SHOFY**


"Terima kasih untuk Program Beasiswa Coding Online Terbesar di Indonesia, IDCamp 2023 dan Dicoding yang telah memberikan akses pengetahuan dan kesempatan belajar yang berharga :)"

**Import library TensorFlow Dan Cek Versi TF tersebut**
"""

import tensorflow as tf
print(tf.__version__)

"""**Download Dataset Rock Paper Scissors**"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

"""**Extract File Zip Dataset Rock Paper Scissors**"""

import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""**Mengatur Directory Train Dan Validation Untuk Dataset**"""

base_dir = '/tmp/rockpaperscissors/rps-cv-images'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

"""**Mengatur Augmentasi Gambar Dengan ImageDataGenerator**

Untuk membagi dataset menjadi data training dan data validation set dengan perbandingan 60% untuk pelatihan dan 40% untuk validasi gunakan validation_split=0.4
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator

data_generator = ImageDataGenerator(
    rescale=1.0/255.0,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.4
)

"""**Menyiapkan Data Train Dan Validation**

Karena dataset ini adalah dataset klasifikasi multikelas (rock, paper, scissors), sehingga digunakan class_mode='categorical'

Lalu, subset='training' menentukan kalau generator ini digunakan untuk subset pelatihan

batch_size=32, menentukan ukuran batch yang akan digunakan dalam pelatihan
"""

train_generator = data_generator.flow_from_directory(
    base_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = data_generator.flow_from_directory(
    base_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

"""**Membuat Model Convolutional Neural Network (CNN)**

Dense(3, activation='softmax') maksudnya untuk menentukan model ini untuk klasifikasi tiga kelas (rock, paper, scissors) lalu aktivasi softmax untuk menghasilkan probabilitas distribusi kelas
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
model = Sequential([
    Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dropout(0.5),
    Dense(512, activation='relu'),
    Dense(3, activation='softmax')
])

model.summary()

"""**Compile Model**

loss='categorical_crossentropy' digunakan karena ini klasifikasi multikelas (rock, paper, scissors)
"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""**Membuat ModelCheckpoint Untuk Menyimpan Model Terbaik**"""

from tensorflow.keras.callbacks import ModelCheckpoint
model_checkpoint = ModelCheckpoint(
    'Model Klasifikasi Gambar - Dicoding x IDCAMP2023.h5',
    monitor='val_accuracy',
    save_best_only=True,
    verbose=1
)

"""**Melatih Model Dengan Data Train Dan Validation**"""

model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size,
    epochs=15,
    callbacks=[model_checkpoint]
)

"""**Evaluasi Model dengan Data Validasi**

Dari hasil dibawah, menunjukkan kalau model telah dilatih dengan nilai loss sekitar 0.1373 dan akurasi sekitar 96.68%
"""

evaluation = model.evaluate(validation_generator)

"""**Upload Gambar**"""

from google.colab import files
uploaded_image = files.upload()

"""**Load Model Yang Telah Dibuat Dan Dilatih**"""

import numpy as np
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

model = tf.keras.models.load_model('Model Klasifikasi Gambar - Dicoding x IDCAMP2023.h5')

"""**Suatu Fungsi Untuk Memprediksi Gambar Dengan Model Tersebut**"""

def predict_image(filename):
    img = image.load_img(filename, target_size=(150, 150))
    img = image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img /= 255.0

    prediction = model.predict(img)
    class_index = np.argmax(prediction)

    if class_index == 0:
        return "Kertas"
    elif class_index == 1:
        return "Batu"
    elif class_index == 2:
        return "Gunting"

"""**Memprediksi Gambar Yang Diunggah Dan Menampilkan Hasilnya**"""

for filename in uploaded_image.keys():
    prediction = predict_image(filename)

    img_path = filename
    img = image.load_img(img_path, target_size=(150, 150))
    plt.imshow(img)
    plt.axis('off')
    plt.title(f"Gambar {filename} diprediksi sebagai : {prediction}")
    plt.show()